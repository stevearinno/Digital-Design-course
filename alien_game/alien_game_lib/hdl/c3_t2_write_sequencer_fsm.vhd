-- VHDL Entity alien_game_lib.c3_t2_write_sequencer.symbol
--
-- Created:
--          by - wirdatma.UNKNOWN (HTC219-716-SPC)
--          at - 14:44:09 21.10.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t2_write_sequencer IS
   PORT( 
      clk           : IN     std_logic;
      rst_n         : IN     std_logic;
      write_ready   : IN     std_logic;
      enable        : OUT    std_logic;
      frame_done    : OUT    std_logic;
      gun_px_idx    : OUT    std_logic_vector (2 DOWNTO 0);
      module_select : OUT    std_logic_vector (1 DOWNTO 0);
      write         : OUT    std_logic
   );

-- Declarations

END c3_t2_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c3_t2_write_sequencer.fsm
--
-- Created:
--          by - wirdatma.UNKNOWN (HTC219-716-SPC)
--          at - 14:44:03 21.10.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c3_t2_write_sequencer IS

   TYPE STATE_TYPE IS (
      start,
      delay_1,
      alien,
      delay_2,
      gun_px_1,
      gun_px_2,
      gun_px_3,
      gun_px_4,
      gun_px_5,
      gun_px_6,
      gun_px_7,
      delay_3,
      frame_sig,
      s0,
      enable_done
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s0 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= start;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s0 <= '0';
      CASE current_state IS
         WHEN start => 
            IF (write_ready = '1') THEN 
               next_state <= delay_1;
            ELSE
               next_state <= start;
            END IF;
         WHEN delay_1 => 
            IF (write_ready = '1') THEN 
               next_state <= alien;
            ELSE
               next_state <= delay_1;
            END IF;
         WHEN alien => 
            IF (write_ready = '1') THEN 
               next_state <= delay_2;
            ELSE
               next_state <= alien;
            END IF;
         WHEN delay_2 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_1;
            ELSE
               next_state <= delay_2;
            END IF;
         WHEN gun_px_1 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_2;
            ELSE
               next_state <= gun_px_1;
            END IF;
         WHEN gun_px_2 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_3;
            ELSE
               next_state <= gun_px_2;
            END IF;
         WHEN gun_px_3 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_4;
            ELSE
               next_state <= gun_px_3;
            END IF;
         WHEN gun_px_4 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_5;
            ELSE
               next_state <= gun_px_4;
            END IF;
         WHEN gun_px_5 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_6;
            ELSE
               next_state <= gun_px_5;
            END IF;
         WHEN gun_px_6 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_px_7;
            ELSE
               next_state <= gun_px_6;
            END IF;
         WHEN gun_px_7 => 
            IF (write_ready = '1') THEN 
               next_state <= delay_3;
            ELSE
               next_state <= gun_px_7;
            END IF;
         WHEN delay_3 => 
            IF (write_ready = '1') THEN 
               next_state <= frame_sig;
            ELSE
               next_state <= delay_3;
            END IF;
         WHEN frame_sig => 
            IF (write_ready = '0') THEN 
               next_state <= enable_done;
            ELSE
               next_state <= frame_sig;
            END IF;
         WHEN s0 => 
            IF (csm_timeout = '1' AND (write_ready = '0')) THEN 
               next_state <= start;
            ELSE
               next_state <= s0;
            END IF;
         WHEN enable_done => 
            IF (write_ready = '0') THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
            ELSE
               next_state <= enable_done;
            END IF;
         WHEN OTHERS =>
            next_state <= start;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= "000";
      module_select <= "00";
      write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN delay_1 => 
            IF (write_ready = '1') THEN 
               write <= '1';
            END IF;
         WHEN alien => 
            IF (write_ready = '1') THEN 
               module_select <= "01";
            END IF;
         WHEN delay_2 => 
            IF (write_ready = '1') THEN 
               module_select <= "01";
                write <= '1';
            END IF;
         WHEN gun_px_1 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "001";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN gun_px_2 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "010";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN gun_px_3 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "011";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN gun_px_4 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "100";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN gun_px_5 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "101";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN gun_px_6 => 
            IF (write_ready = '1') THEN 
               gun_px_idx <= "110";
                write <= '1';
                module_select <= "01";
            END IF;
         WHEN delay_3 => 
            IF (write_ready = '1') THEN 
               frame_done <= '1';
            END IF;
         WHEN frame_sig => 
            IF (write_ready = '0') THEN 
               enable <= '1';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s0
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s0 = '1') THEN
         csm_next_timer <= "1001"; -- no cycles(10)-1=9
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
