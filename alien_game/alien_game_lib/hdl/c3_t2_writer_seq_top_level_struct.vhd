-- VHDL Entity alien_game_lib.c3_t2_writer_seq_top_level.symbol
--
-- Created:
--          by - Thinkpad X1.UNKNOWN (LENOVO-PC)
--          at - 17:51:05 11/21/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t2_writer_seq_top_level IS
   PORT( 
      btn         : IN     std_logic_vector (3 DOWNTO 0);
      clk         : IN     std_logic;
      rst_n       : IN     std_logic;
      sw0         : IN     std_logic;
      write_ready : IN     std_logic;
      color_BGR   : OUT    std_logic_vector (23 DOWNTO 0);
      frame_done  : OUT    std_logic;
      write       : OUT    std_logic;
      x_coord2    : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord2    : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c3_t2_writer_seq_top_level ;

--
-- VHDL Architecture alien_game_lib.c3_t2_writer_seq_top_level.struct
--
-- Created:
--          by - Thinkpad X1.UNKNOWN (LENOVO-PC)
--          at - 17:51:05 11/21/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c3_t2_writer_seq_top_level IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alien_color    : std_logic_vector(23 DOWNTO 0);
   SIGNAL alien_defeated : std_logic;
   SIGNAL btn_out        : std_logic_vector(3 DOWNTO 0);
   SIGNAL bullet_colour  : std_logic_vector(23 DOWNTO 0);
   SIGNAL bullet_y       : std_logic_vector(7 DOWNTO 0);
   SIGNAL din0           : std_logic_vector(7 DOWNTO 0);
   SIGNAL din1           : std_logic_vector(7 DOWNTO 0);
   SIGNAL din2           : std_logic_vector(7 DOWNTO 0);
   SIGNAL din3           : std_logic;
   SIGNAL dout           : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout1          : std_logic;
   SIGNAL dout2          : std_logic;
   SIGNAL enable         : std_logic;
   SIGNAL enable_alien   : std_logic;
   SIGNAL gun_color      : std_logic_vector(23 DOWNTO 0);
   SIGNAL gun_px_idx     : std_logic_vector(2 DOWNTO 0);
   SIGNAL hit            : std_logic;
   SIGNAL hit1           : std_logic;
   SIGNAL module_select  : std_logic_vector(1 DOWNTO 0);
   SIGNAL q              : std_logic;
   SIGNAL vic_px_idx     : std_logic_vector(2 DOWNTO 0);
   SIGNAL victory_color  : std_logic_vector(23 DOWNTO 0);
   SIGNAL victory_x      : std_logic_vector(7 DOWNTO 0);
   SIGNAL victory_y      : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord1       : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord1       : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_15' of 'adff'
   SIGNAL mw_U_15reg_cval : std_logic;

   -- Component Declarations
   COMPONENT c2_t7_basic_alien
   PORT (
      clock          : IN     std_logic ;
      enable         : IN     std_logic ;
      hit            : IN     std_logic ;
      pause_sw       : IN     std_logic ;
      rst_n          : IN     std_logic ;
      alien_color    : OUT    std_logic_vector (23 DOWNTO 0);
      alien_defeated : OUT    std_logic ;
      x_coord        : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord        : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t1_gun_module
   PORT (
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic ;
      enable     : IN     std_logic ;
      gun_px_idx : IN     std_logic_vector (2 DOWNTO 0);
      rst_n      : IN     std_logic ;
      gun_color  : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord    : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t2_write_sequencer
   PORT (
      alien_defeated : IN     std_logic ;
      clk            : IN     std_logic ;
      faster         : IN     std_logic ;
      rst_n          : IN     std_logic ;
      write_ready    : IN     std_logic ;
      enable         : OUT    std_logic ;
      enable_alien   : OUT    std_logic ;
      frame_done     : OUT    std_logic ;
      gun_px_idx     : OUT    std_logic_vector (2 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      vic_px_idx     : OUT    std_logic_vector (2 DOWNTO 0);
      write          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c3_t4_bullet_flight
   PORT (
      btn           : IN     std_logic_vector (3 DOWNTO 0);
      clk           : IN     std_logic ;
      en            : IN     std_logic ;
      gun_x         : IN     std_logic_vector (7 DOWNTO 0);
      pause_sw      : IN     std_logic ;
      rst_n         : IN     std_logic ;
      bullet_colour : OUT    std_logic_vector (23 DOWNTO 0);
      bullet_x      : OUT    std_logic_vector (7 DOWNTO 0);
      bullet_y      : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c4_t1_hit_detector
   PORT (
      alien_x  : IN     std_logic_vector (7 DOWNTO 0);
      alien_y  : IN     std_logic_vector (7 DOWNTO 0);
      bullet_x : IN     std_logic_vector (7 DOWNTO 0);
      bullet_y : IN     std_logic_vector (7 DOWNTO 0);
      clk      : IN     std_logic ;
      rst_n    : IN     std_logic ;
      hit      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c4_t2_victory_effect
   PORT (
      clk           : IN     std_logic ;
      enable        : IN     std_logic ;
      rst_n         : IN     std_logic ;
      vic_px_idx    : IN     std_logic_vector (2 DOWNTO 0);
      dout9         : OUT    std_logic_vector (7 DOWNTO 0);
      victory_color : OUT    std_logic_vector (23 DOWNTO 0);
      victory_x     : OUT    std_logic_vector (7 DOWNTO 0);
      victory_y     : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c4_t3_pause_block
   PORT (
      btn     : IN     std_logic_vector (3 DOWNTO 0);
      sw0     : IN     std_logic ;
      btn_out : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t7_basic_alien USE ENTITY alien_game_lib.c2_t7_basic_alien;
   FOR ALL : c3_t1_gun_module USE ENTITY alien_game_lib.c3_t1_gun_module;
   FOR ALL : c3_t2_write_sequencer USE ENTITY alien_game_lib.c3_t2_write_sequencer;
   FOR ALL : c3_t4_bullet_flight USE ENTITY alien_game_lib.c3_t4_bullet_flight;
   FOR ALL : c4_t1_hit_detector USE ENTITY alien_game_lib.c4_t1_hit_detector;
   FOR ALL : c4_t2_victory_effect USE ENTITY alien_game_lib.c4_t2_victory_effect;
   FOR ALL : c4_t3_pause_block USE ENTITY alien_game_lib.c4_t3_pause_block;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_15' of 'adff'
   q <= mw_U_15reg_cval;
   u_15seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_15reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_15reg_cval <= dout2;
      END IF;
   END PROCESS u_15seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'constval'
   din0 <= "00000000";

   -- ModuleWare code(v1.12) for instance 'U_10' of 'constval'
   din1 <= "00000000";

   -- ModuleWare code(v1.12) for instance 'U_16' of 'constval'
   din3 <= '1';

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(x_coord, x_coord1, dout, victory_x, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => x_coord2 <= x_coord;
      WHEN "01" => x_coord2 <= x_coord1;
      WHEN "10" => x_coord2 <= dout;
      WHEN "11" => x_coord2 <= victory_x;
      WHEN OTHERS => x_coord2 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'mux'
   u_5combo_proc: PROCESS(y_coord, y_coord1, bullet_y, victory_y, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => y_coord2 <= y_coord;
      WHEN "01" => y_coord2 <= y_coord1;
      WHEN "10" => y_coord2 <= bullet_y;
      WHEN "11" => y_coord2 <= victory_y;
      WHEN OTHERS => y_coord2 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_5combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(alien_color, gun_color, bullet_colour, 
                          victory_color, module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => color_BGR <= alien_color;
      WHEN "01" => color_BGR <= gun_color;
      WHEN "10" => color_BGR <= bullet_colour;
      WHEN "11" => color_BGR <= victory_color;
      WHEN OTHERS => color_BGR <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(din0, din1, din2, module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => dout <= din0;
      WHEN "01" => dout <= din1;
      WHEN "10" => dout <= din2;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_8combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_14' of 'mux'
   u_14combo_proc: PROCESS(q, din3, hit1)
   BEGIN
      CASE hit1 IS
      WHEN '0' => dout2 <= q;
      WHEN '1' => dout2 <= din3;
      WHEN OTHERS => dout2 <= 'X';
      END CASE;
   END PROCESS u_14combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_13' of 'or'
   dout1 <= alien_defeated OR q;

   -- Instance port mappings.
   U_2 : c2_t7_basic_alien
      PORT MAP (
         clock          => clk,
         enable         => enable_alien,
         hit            => hit,
         pause_sw       => sw0,
         rst_n          => rst_n,
         alien_color    => alien_color,
         alien_defeated => alien_defeated,
         x_coord        => x_coord,
         y_coord        => y_coord
      );
   U_3 : c3_t1_gun_module
      PORT MAP (
         btn        => btn_out,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         gun_color  => gun_color,
         x_coord    => x_coord1,
         y_coord    => y_coord1
      );
   U_0 : c3_t2_write_sequencer
      PORT MAP (
         alien_defeated => dout1,
         clk            => clk,
         faster         => alien_color(1),
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         enable_alien   => enable_alien,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         vic_px_idx     => vic_px_idx,
         write          => write
      );
   U_1 : c3_t4_bullet_flight
      PORT MAP (
         btn           => btn_out,
         clk           => clk,
         en            => enable,
         gun_x         => x_coord1,
         pause_sw      => sw0,
         rst_n         => rst_n,
         bullet_colour => bullet_colour,
         bullet_x      => din2,
         bullet_y      => bullet_y
      );
   U_7 : c4_t1_hit_detector
      PORT MAP (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => dout,
         bullet_y => bullet_y,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit
      );
   U_12 : c4_t1_hit_detector
      PORT MAP (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_coord1,
         bullet_y => y_coord1,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit1
      );
   U_11 : c4_t2_victory_effect
      PORT MAP (
         clk           => clk,
         enable        => enable,
         rst_n         => rst_n,
         vic_px_idx    => vic_px_idx,
         dout9         => OPEN,
         victory_color => victory_color,
         victory_x     => victory_x,
         victory_y     => victory_y
      );
   U_17 : c4_t3_pause_block
      PORT MAP (
         btn     => btn,
         sw0     => sw0,
         btn_out => btn_out
      );

END struct;
