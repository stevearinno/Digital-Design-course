<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:51 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t2_victory_effect.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-704-SPC)</span>
<span class=C>--          at - 14:15:06  5.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t2_victory_effect <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      vic_px_idx    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      dout9         : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      victory_color : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      victory_x     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      victory_y     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t2_victory_effect ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t2_victory_effect.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-704-SPC)</span>
<span class=C>--          at - 14:15:06  5.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c4_t2_victory_effect <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> bits_in   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out1 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out2 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out3 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out4 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out5 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bits_out6 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d1        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d2        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d3        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d4        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d5        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d6        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d7        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout10    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout11    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout12    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout13    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout14    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout15    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout16    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout17    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout18    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout7     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout8     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q1        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q2        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q3        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q4        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q5        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q6        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_9reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_10' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_10reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_11' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_11reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_12' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_12reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_13' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_13reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_14' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_14reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_15' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_15reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_16' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_16reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_20' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_20reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_21' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_21reg_cval : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c4_t2_rolling_left
   <span class=K>PORT</span> (
      bits_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bits_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t2_rolling_left <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t2_rolling_left;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'adff'</span>
   q <= mw_U_9reg_cval;
   u_9seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_9reg_cval <= <span class=S>"00000001"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_9reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'adff'</span>
   q1 <= mw_U_10reg_cval;
   u_10seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_10reg_cval <= <span class=S>"00000010"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_10reg_cval <= d1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'adff'</span>
   q2 <= mw_U_11reg_cval;
   u_11seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_11reg_cval <= <span class=S>"00000100"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_11reg_cval <= d7;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_11seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'adff'</span>
   q3 <= mw_U_12reg_cval;
   u_12seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_12reg_cval <= <span class=S>"00001000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_12reg_cval <= d6;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'adff'</span>
   bits_in <= mw_U_13reg_cval;
   u_13seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_13reg_cval <= <span class=S>"00010000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_13reg_cval <= d5;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'adff'</span>
   q4 <= mw_U_14reg_cval;
   u_14seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_14reg_cval <= <span class=S>"00100000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_14reg_cval <= d4;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'adff'</span>
   q5 <= mw_U_15reg_cval;
   u_15seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_15reg_cval <= <span class=S>"01000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_15reg_cval <= d3;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'adff'</span>
   q6 <= mw_U_16reg_cval;
   u_16seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_16reg_cval <= <span class=S>"10000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_16reg_cval <= d2;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_16seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_20' of 'adff'</span>
   victory_y <= mw_U_20reg_cval;
   u_20seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_20reg_cval <= <span class=S>"11111111"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_20reg_cval <= dout18;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_20seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_21' of 'adff'</span>
   victory_color <= mw_U_21reg_cval;
   u_21seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_21reg_cval <= <span class=S>"000000001101110001100000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_21reg_cval <= dout8;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_21seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'all_px' of 'constval'</span>
   victory_x <= <span class=S>"11111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'blue' of 'constval'</span>
   dout4 <= <span class=S>"111111110000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'green' of 'constval'</span>
   dout3 <= <span class=S>"000000001111111100000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'indigo' of 'constval'</span>
   dout5 <= <span class=S>"100000100000000001001011"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'orange' of 'constval'</span>
   dout1 <= <span class=S>"000000000111111111111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel1' of 'constval'</span>
   dout10 <= <span class=S>"00000001"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel2' of 'constval'</span>
   dout11 <= <span class=S>"00000010"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel3' of 'constval'</span>
   dout12 <= <span class=S>"00000100"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel4' of 'constval'</span>
   dout13 <= <span class=S>"00001000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel5' of 'constval'</span>
   dout14 <= <span class=S>"00010000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel6' of 'constval'</span>
   dout15 <= <span class=S>"00100000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel7' of 'constval'</span>
   dout16 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'pixel8' of 'constval'</span>
   dout17 <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'red' of 'constval'</span>
   dout <= <span class=S>"000000000000000011111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'violet' of 'constval'</span>
   dout6 <= <span class=S>"110100110000000010010100"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'white' of 'constval'</span>
   dout7 <= <span class=S>"111111111111111111111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'yellow' of 'constval'</span>
   dout2 <= <span class=S>"000000001111111111111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'mux'</span>
   u_0combo_proc: <span class=K>PROCESS</span>(dout7, dout, dout1, dout2, dout3, dout4, dout5,
                          dout6, vic_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> vic_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => dout8 <= dout7;
      <span class=K>WHEN</span> <span class=S>"001"</span> => dout8 <= dout;
      <span class=K>WHEN</span> <span class=S>"010"</span> => dout8 <= dout1;
      <span class=K>WHEN</span> <span class=S>"011"</span> => dout8 <= dout2;
      <span class=K>WHEN</span> <span class=S>"100"</span> => dout8 <= dout3;
      <span class=K>WHEN</span> <span class=S>"101"</span> => dout8 <= dout4;
      <span class=K>WHEN</span> <span class=S>"110"</span> => dout8 <= dout5;
      <span class=K>WHEN</span> <span class=S>"111"</span> => dout8 <= dout6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout8 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'mux'</span>
   u_17combo_proc: <span class=K>PROCESS</span>(q, q1, q2, q3, bits_in, q4, q5, q6,
                           vic_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> vic_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => dout18 <= q;
      <span class=K>WHEN</span> <span class=S>"001"</span> => dout18 <= q1;
      <span class=K>WHEN</span> <span class=S>"010"</span> => dout18 <= q2;
      <span class=K>WHEN</span> <span class=S>"011"</span> => dout18 <= q3;
      <span class=K>WHEN</span> <span class=S>"100"</span> => dout18 <= bits_in;
      <span class=K>WHEN</span> <span class=S>"101"</span> => dout18 <= q4;
      <span class=K>WHEN</span> <span class=S>"110"</span> => dout18 <= q5;
      <span class=K>WHEN</span> <span class=S>"111"</span> => dout18 <= q6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout18 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_17combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_18' of 'mux'</span>
   u_18combo_proc: <span class=K>PROCESS</span>(dout10, dout11, dout12, dout13, dout14, dout15,
                           dout16, dout17, vic_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> vic_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => dout9 <= dout10;
      <span class=K>WHEN</span> <span class=S>"001"</span> => dout9 <= dout11;
      <span class=K>WHEN</span> <span class=S>"010"</span> => dout9 <= dout12;
      <span class=K>WHEN</span> <span class=S>"011"</span> => dout9 <= dout13;
      <span class=K>WHEN</span> <span class=S>"100"</span> => dout9 <= dout14;
      <span class=K>WHEN</span> <span class=S>"101"</span> => dout9 <= dout15;
      <span class=K>WHEN</span> <span class=S>"110"</span> => dout9 <= dout16;
      <span class=K>WHEN</span> <span class=S>"111"</span> => dout9 <= dout17;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout9 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_18combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_22' of 'mux'</span>
   u_22combo_proc: <span class=K>PROCESS</span>(q, bits_out, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d <= q;
      <span class=K>WHEN</span> '1' => d <= bits_out;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_22combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_23' of 'mux'</span>
   u_23combo_proc: <span class=K>PROCESS</span>(q1, din1, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d1 <= q1;
      <span class=K>WHEN</span> '1' => d1 <= din1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_23combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_24' of 'mux'</span>
   u_24combo_proc: <span class=K>PROCESS</span>(q2, bits_out1, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d7 <= q2;
      <span class=K>WHEN</span> '1' => d7 <= bits_out1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d7 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_24combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_25' of 'mux'</span>
   u_25combo_proc: <span class=K>PROCESS</span>(q3, bits_out2, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d6 <= q3;
      <span class=K>WHEN</span> '1' => d6 <= bits_out2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d6 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_25combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_26' of 'mux'</span>
   u_26combo_proc: <span class=K>PROCESS</span>(bits_in, bits_out3, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d5 <= bits_in;
      <span class=K>WHEN</span> '1' => d5 <= bits_out3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d5 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_26combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_27' of 'mux'</span>
   u_27combo_proc: <span class=K>PROCESS</span>(q4, bits_out4, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d4 <= q4;
      <span class=K>WHEN</span> '1' => d4 <= bits_out4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d4 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_27combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_28' of 'mux'</span>
   u_28combo_proc: <span class=K>PROCESS</span>(q5, bits_out5, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d3 <= q5;
      <span class=K>WHEN</span> '1' => d3 <= bits_out5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d3 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_28combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_29' of 'mux'</span>
   u_29combo_proc: <span class=K>PROCESS</span>(q6, bits_out6, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d2 <= q6;
      <span class=K>WHEN</span> '1' => d2 <= bits_out6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_29combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_19 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q,
         bits_out => bits_out
      );
   U_30 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q1,
         bits_out => din1
      );
   U_31 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q2,
         bits_out => bits_out1
      );
   U_32 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q3,
         bits_out => bits_out2
      );
   U_33 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => bits_in,
         bits_out => bits_out3
      );
   U_34 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q4,
         bits_out => bits_out4
      );
   U_35 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q5,
         bits_out => bits_out5
      );
   U_36 : c4_t2_rolling_left
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bits_in  => q6,
         bits_out => bits_out6
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
