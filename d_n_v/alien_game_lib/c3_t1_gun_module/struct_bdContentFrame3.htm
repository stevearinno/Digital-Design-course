<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:13:06 on 25.10.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_gun_module.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-709-SPC)</span>
<span class=C>--          at - 14:25:49 22.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_gun_module <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_color  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_gun_module ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_gun_module.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-714-SPC)</span>
<span class=C>--          at - 18:33:39 23.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_gun_module <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> d     : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d1    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d2    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d3    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2 : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout7 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout8 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout9 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> q     : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q1    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q2    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_16' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_16reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_17' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_17reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_18' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_18reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_19' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_19reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_20' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_20reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c3_t1_pixel_shifter
   <span class=K>PORT</span> (
      end_sel   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      pixel_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      selector  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      pixel_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_pixel_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_pixel_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'adff'</span>
   x_coord <= mw_U_16reg_cval;
   u_16seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_16reg_cval <= <span class=S>"00010000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_16reg_cval <= d3;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_16seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'adff'</span>
   y_coord <= mw_U_17reg_cval;
   u_17seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_17reg_cval <= <span class=S>"10000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_17reg_cval <= dout7;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_17seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_18' of 'adff'</span>
   q <= mw_U_18reg_cval;
   u_18seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_18reg_cval <= <span class=S>"00010000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_18reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_18seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_19' of 'adff'</span>
   q1 <= mw_U_19reg_cval;
   u_19seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_19reg_cval <= <span class=S>"00001000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_19reg_cval <= d1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_19seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_20' of 'adff'</span>
   q2 <= mw_U_20reg_cval;
   u_20seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_20reg_cval <= <span class=S>"00000100"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_20reg_cval <= d2;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_20seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'and'</span>
   dout <= btn(3) <span class=K>AND</span> enable;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'and'</span>
   dout1 <= enable <span class=K>AND</span> btn(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'and'</span>
   dout8 <= q(7) <span class=K>AND</span> btn(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'and'</span>
   dout9 <= btn(3) <span class=K>AND</span> q2(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'constval'</span>
   gun_color <= <span class=S>"100000001000000010000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   dout4 <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   dout5 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'constval'</span>
   dout6 <= <span class=S>"00100000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'merge'</span>
   dout2 <= dout1 & dout;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(q, q1, q2, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => d3 <= q;
      <span class=K>WHEN</span> <span class=S>"001"</span> => d3 <= q1;
      <span class=K>WHEN</span> <span class=S>"010"</span> => d3 <= q2;
      <span class=K>WHEN</span> <span class=S>"011"</span> => d3 <= q;
      <span class=K>WHEN</span> <span class=S>"100"</span> => d3 <= q1;
      <span class=K>WHEN</span> <span class=S>"101"</span> => d3 <= q2;
      <span class=K>WHEN</span> <span class=S>"110"</span> => d3 <= q1;
      <span class=K>WHEN</span> <span class=S>"111"</span> => d3 <= q1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d3 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'mux'</span>
   u_11combo_proc: <span class=K>PROCESS</span>(dout4, dout5, dout6, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => dout7 <= dout4;
      <span class=K>WHEN</span> <span class=S>"001"</span> => dout7 <= dout4;
      <span class=K>WHEN</span> <span class=S>"010"</span> => dout7 <= dout4;
      <span class=K>WHEN</span> <span class=S>"011"</span> => dout7 <= dout5;
      <span class=K>WHEN</span> <span class=S>"100"</span> => dout7 <= dout5;
      <span class=K>WHEN</span> <span class=S>"101"</span> => dout7 <= dout5;
      <span class=K>WHEN</span> <span class=S>"110"</span> => dout7 <= dout6;
      <span class=K>WHEN</span> <span class=S>"111"</span> => dout7 <= dout6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout7 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_11combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'or'</span>
   dout3 <= dout8 <span class=K>OR</span> dout9;

   <span class=C>-- Instance port mappings.</span>
   U_13 : c3_t1_pixel_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         end_sel   => dout3,
         pixel_in  => q,
         selector  => dout2,
         pixel_out => d
      );
   U_14 : c3_t1_pixel_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         end_sel   => dout3,
         pixel_in  => q1,
         selector  => dout2,
         pixel_out => d1
      );
   U_15 : c3_t1_pixel_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         end_sel   => dout3,
         pixel_in  => q2,
         selector  => dout2,
         pixel_out => d2
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
