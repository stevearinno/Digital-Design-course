<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:13:09 on 25.10.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t2_write_sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-716-SPC)</span>
<span class=C>--          at - 14:44:09 21.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t2_write_sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable        : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_idx    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      module_select : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t2_write_sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t2_write_sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-706-SPC)</span>
<span class=C>--          at - 11:47:40 25.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c3_t2_write_sequencer <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      start,
      delay_1,
      alien,
      delay_2,
      gun_px_1,
      gun_px_2,
      gun_px_3,
      gun_px_4,
      gun_px_5,
      gun_px_6,
      gun_px_7,
      delay_4,
      frame_sig,
      s0,
      enable_done,
      gun_px_8,
      bullet,
      delay_3
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(24 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(24 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s0 : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= start;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      csm_timeout,
      current_state,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s0 <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> start =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= delay_1;
            <span class=K>ELSE</span>
               next_state <= start;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_1 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= alien;
            <span class=K>ELSE</span>
               next_state <= delay_1;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> alien =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= delay_2;
            <span class=K>ELSE</span>
               next_state <= alien;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_2 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_1;
            <span class=K>ELSE</span>
               next_state <= delay_2;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_1 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_2;
            <span class=K>ELSE</span>
               next_state <= gun_px_1;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_2 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_3;
            <span class=K>ELSE</span>
               next_state <= gun_px_2;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_3 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_4;
            <span class=K>ELSE</span>
               next_state <= gun_px_3;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_4 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_5;
            <span class=K>ELSE</span>
               next_state <= gun_px_4;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_5 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_6;
            <span class=K>ELSE</span>
               next_state <= gun_px_5;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_6 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_7;
            <span class=K>ELSE</span>
               next_state <= gun_px_6;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_7 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= gun_px_8;
            <span class=K>ELSE</span>
               next_state <= gun_px_7;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_4 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= frame_sig;
            <span class=K>ELSE</span>
               next_state <= delay_4;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> frame_sig =>
            next_state <= enable_done;
         <span class=K>WHEN</span> s0 =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= start;
            <span class=K>ELSE</span>
               next_state <= s0;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> enable_done =>
            next_state <= s0;
            csm_to_s0 <= '1';
         <span class=K>WHEN</span> gun_px_8 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= delay_3;
            <span class=K>ELSE</span>
               next_state <= gun_px_8;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> bullet =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= delay_4;
            <span class=K>ELSE</span>
               next_state <= bullet;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_3 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= bullet;
            <span class=K>ELSE</span>
               next_state <= delay_3;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= start;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= <span class=S>"000"</span>;
      module_select <= <span class=S>"00"</span>;
      write <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> delay_1 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               write <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> alien =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_2 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               module_select <= <span class=S>"01"</span>;
                write <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_1 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"001"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_2 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"010"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_3 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"011"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_4 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"100"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_5 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"101"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_6 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"110"</span>;
                write <= '1';
                module_select <= <span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_px_7 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx <= <span class=S>"111"</span>;
                write <= '1';
                module_select <=<span class=S>"01"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_4 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               frame_done <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> frame_sig =>
            enable <= '1';
         <span class=K>WHEN</span> gun_px_8 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               write <= '1';
                module_select <= <span class=S>"10"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> delay_3 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               write <= '1';
                module_select <= <span class=S>"10"</span>;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s0
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s0 = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"1001100010010110011111111"</span>; <span class=C>-- no cycles(20000000)-1=19999999</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
