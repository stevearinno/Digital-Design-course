<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:39 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c2_t7_coordinate.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-716-SPC)</span>
<span class=C>--          at - 16:18:04 21.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c2_t7_coordinate <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clock          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      en             : <span class=A>IN</span>     <span class=T>std_logic</span>;
      lvl3           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pause_sw       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      x_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c2_t7_coordinate ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c2_t7_coordinate.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-716-SPC)</span>
<span class=C>--          at - 16:17:58 21.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c2_t7_coordinate <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> d               : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d1              : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din0            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din1            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din3            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din4            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din5            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din6            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din7            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din8            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout            : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout6           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> out_left_shift  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> out_right_shift : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q               : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> sel             : <span class=T>std_logic</span>;

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> x_coord_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_4' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_4reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_12' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_12reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_17' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_17reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_18' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_18reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t3_left_shifter
   <span class=K>PORT</span> (
      in_left_shift  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      out_left_shift : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      in_right_shift  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      out_right_shift : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t3_left_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t3_left_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'adff'</span>
   x_coord_internal <= mw_U_4reg_cval;
   u_4seq_proc: <span class=K>PROCESS</span> (clock, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_4reg_cval <= <span class=S>"00100000"</span>;
      <span class=K>ELSIF</span> (clock'<span class=A>EVENT</span> <span class=K>AND</span> clock='1') <span class=K>THEN</span>
         mw_U_4reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'adff'</span>
   q <= mw_U_12reg_cval;
   u_12seq_proc: <span class=K>PROCESS</span> (clock, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_12reg_cval <= '0';
      <span class=K>ELSIF</span> (clock'<span class=A>EVENT</span> <span class=K>AND</span> clock='1') <span class=K>THEN</span>
         mw_U_12reg_cval <= dout1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'adff'</span>
   din7 <= mw_U_17reg_cval;
   u_17seq_proc: <span class=K>PROCESS</span> (clock, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_17reg_cval <= '0';
      <span class=K>ELSIF</span> (clock'<span class=A>EVENT</span> <span class=K>AND</span> clock='1') <span class=K>THEN</span>
         mw_U_17reg_cval <= sel;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_17seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_18' of 'adff'</span>
   y_coord_internal <= mw_U_18reg_cval;
   u_18seq_proc: <span class=K>PROCESS</span> (clock, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_18reg_cval <= <span class=S>"00000001"</span>;
      <span class=K>ELSIF</span> (clock'<span class=A>EVENT</span> <span class=K>AND</span> clock='1') <span class=K>THEN</span>
         mw_U_18reg_cval <= d1;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_18seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'and'</span>
   din0 <= x_coord_internal(0) <span class=K>AND</span> <span class=K>NOT</span>(x_coord_internal(1));

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'and'</span>
   din2 <= x_coord_internal(7) <span class=K>AND</span> <span class=K>NOT</span>(x_coord_internal(6));

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   din3 <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   din4 <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'constval'</span>
   din6 <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'constval'</span>
   din5 <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'merge'</span>
   dout <= din2 & din0;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(x_coord_internal, din1, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout6 <= x_coord_internal;
      <span class=K>WHEN</span> '1' => dout6 <= din1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout6 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(out_left_shift, out_right_shift, q)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> q <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => din1 <= out_left_shift;
      <span class=K>WHEN</span> '1' => din1 <= out_right_shift;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => din1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'mux'</span>
   u_9combo_proc: <span class=K>PROCESS</span>(q, din3, din4, dout)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout1 <= q;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout1 <= din3;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout1 <= din4;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout1 <= q;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout1 <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'mux'</span>
   u_13combo_proc: <span class=K>PROCESS</span>(en, din6, sel)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => enable <= en;
      <span class=K>WHEN</span> '1' => enable <= din6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => enable <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'mux'</span>
   u_15combo_proc: <span class=K>PROCESS</span>(din7, din5, alien_defeated)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> alien_defeated <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => sel <= din7;
      <span class=K>WHEN</span> '1' => sel <= din5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => sel <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_19' of 'mux'</span>
   u_19combo_proc: <span class=K>PROCESS</span>(y_coord_internal, dout2, lvl3)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> lvl3 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout3 <= y_coord_internal;
      <span class=K>WHEN</span> '1' => dout3 <= dout2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout3 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_19combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_20' of 'mux'</span>
   u_20combo_proc: <span class=K>PROCESS</span>(y_coord_internal, din8, dout5)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout5 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout2 <= y_coord_internal;
      <span class=K>WHEN</span> '1' => dout2 <= din8;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_20combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_22' of 'mux'</span>
   u_22combo_proc: <span class=K>PROCESS</span>(y_coord_internal, dout3, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout4 <= y_coord_internal;
      <span class=K>WHEN</span> '1' => dout4 <= dout3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout4 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_22combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_23' of 'mux'</span>
   u_23combo_proc: <span class=K>PROCESS</span>(dout4, y_coord_internal, pause_sw)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> pause_sw <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d1 <= dout4;
      <span class=K>WHEN</span> '1' => d1 <= y_coord_internal;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_23combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_24' of 'mux'</span>
   u_24combo_proc: <span class=K>PROCESS</span>(dout6, x_coord_internal, pause_sw)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> pause_sw <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d <= dout6;
      <span class=K>WHEN</span> '1' => d <= x_coord_internal;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_24combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'or'</span>
   dout5 <= din0 <span class=K>OR</span> din2;

   <span class=C>-- Instance port mappings.</span>
   U_2 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         in_left_shift  => x_coord_internal,
         out_left_shift => out_left_shift
      );
   U_21 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         in_left_shift  => y_coord_internal,
         out_left_shift => din8
      );
   U_3 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         in_right_shift  => x_coord_internal,
         out_right_shift => out_right_shift
      );

   <span class=C>-- Implicit buffered output assignments</span>
   x_coord <= x_coord_internal;
   y_coord <= y_coord_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
