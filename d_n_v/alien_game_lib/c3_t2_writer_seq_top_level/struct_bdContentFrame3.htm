<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:46 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t2_writer_seq_top_level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Thinkpad X1.UNKNOWN (LENOVO-PC)</span>
<span class=C>--          at - 17:51:05 11&#47;21&#47;2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t2_writer_seq_top_level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      sw0         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color_BGR   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      write       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x_coord2    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord2    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t2_writer_seq_top_level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t2_writer_seq_top_level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Thinkpad X1.UNKNOWN (LENOVO-PC)</span>
<span class=C>--          at - 17:51:05 11&#47;21&#47;2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t2_writer_seq_top_level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> alien_color    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> alien_defeated : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> btn_out        : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_colour  : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_y       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din0           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din3           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout           : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> enable         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> enable_alien   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_color      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> gun_px_idx     : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> hit1           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select  : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q              : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> vic_px_idx     : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> victory_color  : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> victory_x      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> victory_y      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_15' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_15reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t7_basic_alien
   <span class=K>PORT</span> (
      clock          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      pause_sw       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_color    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      alien_defeated : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t1_gun_module
   <span class=K>PORT</span> (
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_color  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t2_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      faster         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      enable_alien   : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      vic_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t4_bullet_flight
   <span class=K>PORT</span> (
      btn           : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      en            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      pause_sw      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      bullet_colour : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      bullet_x      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y      : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t1_hit_detector
   <span class=K>PORT</span> (
      alien_x  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t2_victory_effect
   <span class=K>PORT</span> (
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      vic_px_idx    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      dout9         : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      victory_color : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      victory_x     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      victory_y     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c4_t3_pause_block
   <span class=K>PORT</span> (
      btn     : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      sw0     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      btn_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t7_basic_alien <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t7_basic_alien;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_gun_module <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_gun_module;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t2_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t2_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t4_bullet_flight <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t4_bullet_flight;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_hit_detector <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_hit_detector;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t2_victory_effect <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t2_victory_effect;
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t3_pause_block <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t3_pause_block;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'adff'</span>
   q <= mw_U_15reg_cval;
   u_15seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_15reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_15reg_cval <= dout2;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   din0 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   din1 <= <span class=S>"00000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'constval'</span>
   din3 <= '1';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(x_coord, x_coord1, dout, victory_x,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => x_coord2 <= x_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => x_coord2 <= x_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => x_coord2 <= dout;
      <span class=K>WHEN</span> <span class=S>"11"</span> => x_coord2 <= victory_x;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_coord2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(y_coord, y_coord1, bullet_y, victory_y,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_coord2 <= y_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_coord2 <= y_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_coord2 <= bullet_y;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_coord2 <= victory_y;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(alien_color, gun_color, bullet_colour,
                          victory_color, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => color_BGR <= alien_color;
      <span class=K>WHEN</span> <span class=S>"01"</span> => color_BGR <= gun_color;
      <span class=K>WHEN</span> <span class=S>"10"</span> => color_BGR <= bullet_colour;
      <span class=K>WHEN</span> <span class=S>"11"</span> => color_BGR <= victory_color;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color_BGR <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(din0, din1, din2, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout <= din0;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout <= din1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout <= din2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'mux'</span>
   u_14combo_proc: <span class=K>PROCESS</span>(q, din3, hit1)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> hit1 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout2 <= q;
      <span class=K>WHEN</span> '1' => dout2 <= din3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'or'</span>
   dout1 <= alien_defeated <span class=K>OR</span> q;

   <span class=C>-- Instance port mappings.</span>
   U_2 : c2_t7_basic_alien
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clock          => clk,
         enable         => enable_alien,
         hit            => hit,
         pause_sw       => sw0,
         rst_n          => rst_n,
         alien_color    => alien_color,
         alien_defeated => alien_defeated,
         x_coord        => x_coord,
         y_coord        => y_coord
      );
   U_3 : c3_t1_gun_module
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn        => btn_out,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         gun_color  => gun_color,
         x_coord    => x_coord1,
         y_coord    => y_coord1
      );
   U_0 : c3_t2_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => dout1,
         clk            => clk,
         faster         => alien_color(1),
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         enable_alien   => enable_alien,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         vic_px_idx     => vic_px_idx,
         write          => write
      );
   U_1 : c3_t4_bullet_flight
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn           => btn_out,
         clk           => clk,
         en            => enable,
         gun_x         => x_coord1,
         pause_sw      => sw0,
         rst_n         => rst_n,
         bullet_colour => bullet_colour,
         bullet_x      => din2,
         bullet_y      => bullet_y
      );
   U_7 : c4_t1_hit_detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => dout,
         bullet_y => bullet_y,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit
      );
   U_12 : c4_t1_hit_detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_coord1,
         bullet_y => y_coord1,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit1
      );
   U_11 : c4_t2_victory_effect
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk           => clk,
         enable        => enable,
         rst_n         => rst_n,
         vic_px_idx    => vic_px_idx,
         dout9         => <span class=K>OPEN</span>,
         victory_color => victory_color,
         victory_x     => victory_x,
         victory_y     => victory_y
      );
   U_17 : c4_t3_pause_block
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn     => btn,
         sw0     => sw0,
         btn_out => btn_out
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
