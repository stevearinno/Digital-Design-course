<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:41 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_pixel_shifter.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-714-SPC)</span>
<span class=C>--          at - 18:14:04 23.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_pixel_shifter <span class=K>IS</span>
   <span class=K>PORT</span>(
      end_sel   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pixel_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      selector  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      pixel_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_pixel_shifter ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_pixel_shifter.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-714-SPC)</span>
<span class=C>--          at - 18:14:04 23.10.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_pixel_shifter <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> out_left_shift  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> out_right_shift : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t3_left_shifter
   <span class=K>PORT</span> (
      in_left_shift  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      out_left_shift : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      in_right_shift  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      out_right_shift : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t3_left_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t3_left_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(pixel_in, out_right_shift, out_left_shift,
                          selector)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> selector <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout <= pixel_in;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout <= out_right_shift;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout <= out_left_shift;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout <= pixel_in;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(dout, pixel_in, end_sel)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> end_sel <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => pixel_out <= dout;
      <span class=K>WHEN</span> '1' => pixel_out <= pixel_in;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => pixel_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_1 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         in_left_shift  => pixel_in,
         out_left_shift => out_left_shift
      );
   U_0 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         in_right_shift  => pixel_in,
         out_right_shift => out_right_shift
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
