<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:54 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t1_shield_gamma_set.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-714-SPC)</span>
<span class=C>--          at - 12:29:49 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t1_shield_gamma_set <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rx_rdy   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      lat      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      transmit : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t1_shield_gamma_set ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t1_shield_gamma_set.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-714-SPC)</span>
<span class=C>--          at - 12:29:49 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c5_t1_shield_gamma_set <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> counter : <span class=T>integer</span> <span class=K>RANGE</span> 14 <span class=K>DOWNTO</span> 0 := 0;
   <span class=K>SIGNAL</span> data : <span class=T>std_logic_vector</span>(17 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> index : <span class=T>integer</span> <span class=K>RANGE</span> 17 <span class=K>DOWNTO</span> 0 := 0;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      start,
      sel_outbit,
      increment_index,
      reset_index,
      set_lat,
      set_sb
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= start;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         <span class=C>-- Default Assignment To Internals</span>
         data <= <span class=S>"011100111111110111"</span>;

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> increment_index =>
               index <= index +1;
            <span class=K>WHEN</span> reset_index =>
               index <= 0;
               counter <= counter+1;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      counter,
      current_state,
      index,
      rx_rdy
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> start =>
            <span class=K>IF</span> (rx_rdy = '1' <span class=K>AND</span> index < 18 <span class=K>AND</span> counter <8) <span class=K>THEN</span>
               next_state <= sel_outbit;
            <span class=K>ELSIF</span> (counter = 8) <span class=K>THEN</span>
               next_state <= set_lat;
            <span class=K>ELSE</span>
               next_state <= start;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> sel_outbit =>
            <span class=K>IF</span> (index < 17) <span class=K>THEN</span>
               next_state <= increment_index;
            <span class=K>ELSIF</span> (index = 17) <span class=K>THEN</span>
               next_state <= reset_index;
            <span class=K>ELSE</span>
               next_state <= sel_outbit;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> increment_index =>
            next_state <= start;
         <span class=K>WHEN</span> reset_index =>
            next_state <= start;
         <span class=K>WHEN</span> set_lat =>
            next_state <= set_sb;
         <span class=K>WHEN</span> set_sb =>
            next_state <= set_sb;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= start;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state,
      data,
      index
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      lat <= '0';
      sb <= '0';
      transmit <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> sel_outbit =>
            transmit <= '1';
             bit_out <= data(index);
         <span class=K>WHEN</span> set_lat =>
            lat <='1';
         <span class=K>WHEN</span> set_sb =>
            sb<='1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
