<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:33:49 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t1_hit_detector.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-704-SPC)</span>
<span class=C>--          at - 13:56:10  1.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t1_hit_detector <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_x  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t1_hit_detector ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t1_hit_detector.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - wirdatma.UNKNOWN (HTC219-704-SPC)</span>
<span class=C>--          at - 13:56:04  1.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c4_t1_hit_detector <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din1   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout10 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout11 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout12 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout13 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout14 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout16 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout17 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout18 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout19 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout20 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout21 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout22 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout23 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout24 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout25 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout26 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout27 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout28 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout29 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout3  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout6  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout7  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout8  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout9  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> hit_in : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c4_t1_hit_debounce
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit_in  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit_out : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c4_t1_hit_debounce <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c4_t1_hit_debounce;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'and'</span>
   dout <= alien_x(7) <span class=K>AND</span> bullet_x(7);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'and'</span>
   dout1 <= alien_x(6) <span class=K>AND</span> bullet_x(6);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'and'</span>
   dout2 <= alien_x(5) <span class=K>AND</span> bullet_x(5);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'and'</span>
   dout3 <= alien_x(4) <span class=K>AND</span> bullet_x(4);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'and'</span>
   dout4 <= alien_x(3) <span class=K>AND</span> bullet_x(3);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'and'</span>
   dout5 <= alien_x(2) <span class=K>AND</span> bullet_x(2);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'and'</span>
   dout6 <= alien_x(1) <span class=K>AND</span> bullet_x(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'and'</span>
   dout7 <= alien_x(0) <span class=K>AND</span> bullet_x(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'and'</span>
   hit_in <= dout14 <span class=K>AND</span> din1;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_18' of 'and'</span>
   dout23 <= alien_y(7) <span class=K>AND</span> bullet_y(7);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_20' of 'and'</span>
   dout21 <= alien_y(6) <span class=K>AND</span> bullet_y(6);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_22' of 'and'</span>
   dout29 <= alien_y(5) <span class=K>AND</span> bullet_y(5);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_24' of 'and'</span>
   dout17 <= alien_y(4) <span class=K>AND</span> bullet_y(4);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_26' of 'and'</span>
   dout18 <= alien_y(3) <span class=K>AND</span> bullet_y(3);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_28' of 'and'</span>
   dout24 <= alien_y(2) <span class=K>AND</span> bullet_y(2);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_30' of 'and'</span>
   dout25 <= alien_y(1) <span class=K>AND</span> bullet_y(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_32' of 'and'</span>
   dout19 <= alien_y(0) <span class=K>AND</span> bullet_y(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'or'</span>
   dout8 <= dout <span class=K>OR</span> dout1;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'or'</span>
   dout9 <= dout2 <span class=K>OR</span> dout3;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'or'</span>
   dout10 <= dout4 <span class=K>OR</span> dout5;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'or'</span>
   dout11 <= dout6 <span class=K>OR</span> dout7;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'or'</span>
   dout12 <= dout8 <span class=K>OR</span> dout9;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'or'</span>
   dout13 <= dout10 <span class=K>OR</span> dout11;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'or'</span>
   dout14 <= dout12 <span class=K>OR</span> dout13;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_19' of 'or'</span>
   dout20 <= dout23 <span class=K>OR</span> dout21;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_21' of 'or'</span>
   dout27 <= dout20 <span class=K>OR</span> dout28;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_23' of 'or'</span>
   dout28 <= dout29 <span class=K>OR</span> dout17;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_25' of 'or'</span>
   din1 <= dout27 <span class=K>OR</span> dout16;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_27' of 'or'</span>
   dout22 <= dout18 <span class=K>OR</span> dout24;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_29' of 'or'</span>
   dout16 <= dout22 <span class=K>OR</span> dout26;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_31' of 'or'</span>
   dout26 <= dout25 <span class=K>OR</span> dout19;

   <span class=C>-- Instance port mappings.</span>
   U_16 : c4_t1_hit_debounce
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         hit_in  => hit_in,
         rst_n   => rst_n,
         hit_out => hit
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
